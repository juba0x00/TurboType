name: Tubro-CI

on: 
  workflow_dispatch:
  
  push: 
    branches:
      - 'main'
      - 'develop'
      - 'feature-**'
      - '!CI-**'
    paths:
        - 'TurboType/**'
        - '!.github/workflows'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'feature-**'
      - '!CI-**'
    paths:
        - 'TurboType/**'
        - '!.github/workflows'

jobs:

  build-test:
    runs-on: ubuntu-latest 
    defaults:
      run:
        shell: bash
        
    steps:

      - name: checkout
        uses: actions/checkout@v4
    

      - name: Set up Python 3.8
        uses: actions/setup-python@v5 
        with:
          python-version: 3.10 # Modify python version HERE

      #Task for installing dependencies, multi-line command
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          pip install -r requirements.txt 


      # Task for testing with pytest
      - name: Test with pytest
        run: |
          pytest 

      
      



#############################################################################


  lint:
    if: github.actor!= 'dependabot[bot]'
    defaults:
      run:
        shell: bash
        

            
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:    
  
      - uses: actions/checkout@v4
        name: 'Checkout repository'

      ##############################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: true
          FILTER_REGEX_INCLUDE: .*backend/app/app/.*



############################################################################
          
  analyze-codeQL:
    if: github.actor!= 'dependabot[bot]'
    name: Analyze code
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        
    needs: [build-test]
    permissions:
      actions: read
      contents: read
      security-events: write
      

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2


    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

      
############################################################################

  analyze-codacy:
    if: github.actor!= 'dependabot[bot]'
    needs: [build-test]
    defaults:
      run:
        shell: bash
        
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:

      - name: short-sha
        uses: benjlevesque/short-sha@v2.2
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif


  
  pypi:
    if: github.actor!= 'dependabot[bot]'
    defaults:
      run:
        shell: bash
    # needs: [analyze-codeQL , analyze-codacy , lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pypa/build
        run: >
          pip install --upgrade pip
          pip install build
          pip install twine 

      - name: Build binary wheel and a source tarball
        run: python setup.py sdist
        

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository_url: https://upload.pypi.org/legacy/